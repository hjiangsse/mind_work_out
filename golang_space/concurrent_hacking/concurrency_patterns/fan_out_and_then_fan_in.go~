package main

import "fmt"

func isPrime(x int) bool {
	for i = 2; i < x; i++ {
		if x%i == 0 {
			return false
		}
	}
	return true
}

func main() {
	/*
		toInt := func(done <-chan interface{}, valueStream <-chan interface{}) <-chan int {
			intStream := make(chan int)
			go func() {
				defer close(intStream)
				for v := range valueStream {
					select {
					case <-done:
						return
					case intStream <- v:
					}
				}
			}()
			return intStream
		}

		repeatFn := func(done <-chan interface{}, fn func() interface{}) <-chan interface{} {
			valueStream := make(chan interface{})
			go func() {
				defer close(valueStream)
				for {
					select {
					case <-done:
						return
					case valueStream <- fn():
					}
				}
			}()
			return valueStream
		}

		primeFinder := func(done <-chan interface{}, intStream <-chan int) <-chan int {
			primeStream = make(chan int)
			go func() {
				defer close(primeStream)
				for i := range intStream {
					select {
					case <-done:
						return
					default:
					}

					if isPrime(i) {
						primeStream <- i
					}
				}
			}()
		}

		take := func(done <-chan interface{}, valueStream <-chan interface{}, num int) <-chan interface{} {
			takeStream := make(chan interface{})
			go func() {
				defer close(takeStream)
				for i := 0; i < num; i++ {
					select {
					case <-done:
						return
					case takeStream <- <-valueStream:
					}
				}
			}()
			return takeStream
		}

		randFn := func() interface{} { return and.Intn(50000000) }

		done := make(chan interface{})
		defer close(done)

		start := time.Now()
		randIntStream := toInt(done, repeatFn(done, randFn))
		fmt.Println("Primes: ")

		//for prime := range take(done, )
	*/
	if isPrime(10) {
		fmt.Printf("%d is a prime number!\n", 10)
	}
}
